name: Docker Build and Push

on:
  schedule:
    - cron: '*/10 * * * *'
  deployment_status:
    types: [success]  # Déclenche le workflow uniquement si le déploiement a réussi

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Lecture du contenu du dépôt
      packages: write  # Permission pour pousser des images dans le registre
      id-token: write  # Permission d'écriture pour l'authentification via l'identité GitHub

    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout repository
        uses: actions/checkout@v4

      # Étape 2 : Installer cosign pour signer l'image Docker
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: 'v2.2.4'

      # Étape 3 : Configuration de Docker Buildx pour les images multi-plateformes
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      # Étape 4 : Connexion à GitHub Container Registry
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Étape 5 : Extraire les métadonnées Docker (tags et labels)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Étape 6 : Construire et pousser l'image Docker
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: .
          push: true  # Nous voulons pousser l'image après la construction
          tags: ${{ steps.meta.outputs.tags }}  # Tag de l'image
          labels: ${{ steps.meta.outputs.labels }}  # Labels de l'image
          cache-from: type=gha  # Utilisation du cache de GitHub Actions
          cache-to: type=gha,mode=max  # Utilisation maximale du cache
